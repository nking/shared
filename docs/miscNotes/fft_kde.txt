a subset of information about fourier transforms, useful for the applications 
outlined below
=============================================================================
note: '*' is multiplication (scalar or element-wise (dot)) 
      'mult' is also multiplication.
      'conv' is convolution.
      i = sqrt(-1).
      delta is the delta-dirac function (an impulse function).

fourier pairs:
  g(t)                          and G(f) = integral_(-inf to inf) ( g(t) * exp(-i f*t) * dt )
  g(t) = (1/(2*pi)) * integral_(-inf to inf) ( G(f) * exp(i f*t) * df )   and G(f) is G(f)
  g(t) = delta(t)               and G(f) = 1
  g(t) = 1                      and G(f) = delta(f)
  g(t) = exp(i 2*pi*f_0*t)      and G(f) = delta(f - f_0)
  g(t) = u(t)                   and G(f) = (1/2)*( delta(f) + (1/(i 2*pi*f)) )
                                   alternatively = pi * ( delta(f) + (1/(i f)) )
  g(t) = exp(-t^2/(sigma^2))    and G(f) = sigma*sqrt(2*pi)*exp(-2*(sigma*pi*f)^2)  <== Gaussian
  g(t) = A * delta(t - t0)      and G(f) = A * exp(-i f*t0)
  g(t) = exp(i f0*t)            and G(f) = 2*pi*(delta(f - f0))
  g(t) = exp(i 2*pi*f0*t)       and G(f) = delta(f - f0)

some properties:
                                       g(t)                              G(f)
 superposition:                  g1(t) + g2(t)                     G1(f) + G2(f)
 scalar mult:                    k*g(t)                            k*G(f)
 duality                         G(t)                              g(-f)
 scaling:                        g(a*t)                            (1/|a|)*G(f/a)
 space or time shifting:         g(t-t0)                           G(f/a) * exp(-i 2*pi*f*t0)
 freq shifting:                  g(t) * exp( 2*pi*f*t0 )           G(f)
 space or time convolution:      g1(t) conv g2(t)                  G1(f) mult G2(f)
 freq convolution:               g1(t) mult g2(t)                  G1(f) conv G2(f)
 space or time differentiation:  dg(t)/dt to power n               (i 2*pi*f)^n * G(f)
 space or time integration:      integral_(-inf to inf)(g(x)*dx)   ( G(f)/(i 2*pi*f) ) + 0.5*G(0)*delta(f)

---------------------------------
KDE:
   Silverman 1982 use of FFT:

   kde estimate f_n(x) = (1/(n*h)) sum_(j=1 to n)( K((x-X_j)/h)
      where K is the kernel function
      X_j is the observed data
      h is the smoothing parameter of the window.
      x is the point to evaluate the function at.

   FFT(kde) = FFT(f_n(x)) = (1/(2*pi)) * FFT(K(h*s)) * u(s)
     where u(s) is the FFT of the fine histogram of the data:
     u(s) = (1/sqrt(2*pi)) * (1/n) * sum_(j=1 to n)( exp(i s*j) ) 
     and FFT(K(h*s)) = exp(-0.5*(h*s)^2)

   FFT(kde) = exp(-0.5*(h*s)^2) * u(s) 

   inverse FFT ( FFT(kde) ) = kde

transform and convolution details using the fourier tables above:

   FFT(hist(X)) = (1/sqrt(2*pi)) * (1/n) * sum_(j=1 to n)( exp(i s*X_j) ). <-- looks like this should be exp(i X_j/s) 
       the FFT of the histogram is ~ (c_normalization) * exp(i (c_normalization2) * Y_j) <-- where one of the fourier pairs will use -i.
       Y_j is the count in bin j and depends upon X_j and s.
       s is the x axis of the histogram, and it's the grid in the frequency domain.
       the binwidth h is an interval in s.
       the bin number for each X_j is (1/h)*(X_j - b) where b = min of histogram range.

       as an aside, to keep exploring the histogram in the frequency domain:
           s, as the x-axis of the histogram, is a superposition of shifted delta functions in 
           the frequency domain, and each interval in s can be expressed as ff - ff_j, where ff is (1/f).
               delta(ff - ff_0) + delta(ff - ff_1) + ... delta(ff - ff_(n-1))

           the fourier pair for delta(ff - ff_j) is exp(-i ff_j*t) 
           and the superposition of those for j=0 to n-1 is sum_(j=0 to n-1) ( exp(-i ff_j * tt) )
           therefore FFT( sum_(j=0 to n-1) ( delta(ff - ff_j) ) ) = sum_(j=0 to n-1) ( exp(-i ff_j * tt) )

   FFT(K(h*s)) = exp(-0.5*(h*s)^2)
      the fourier pair of the Gaussian is another Gaussian:
      g(t) = exp(-t^2/(sigma^2))   and G(f) = sigma*sqrt(2*pi)*exp(-2*(sigma*pi*f)^2)  
                                            = sigma*(c1)*exp(-c2*(sigma*f)^2)  where c1 and c2 are normalization terms
        
      g(t) = exp(-t^2/(sigma^2)) <== sigma = h
      and 
      K(h*s) = G(f) = sigma*(c1)*exp(-c2*(sigma*f)^2) <== f = s, sigma=h
   
   The convolution of the data with the Gaussian Kernel function in the
      spatial domain is the multiplication of the fourier transforms in the frequency domain
      and vice versa:
         space or time convolution:      g1(t) conv g2(t)                  G1(f) mult G2(f)
         freq convolution:               g1(t) mult g2(t)                  G1(f) conv G2(f)
    
   FFT(kde) = FFT(f_n(x)) = (1/(2*pi)) times FFT(K(h*s)) mult FFT(hist(X))
   kde = inverse FFT( FFT(kde) )

--------------------------------------------------------------------------------------------

image smoothing by convolving a 1D row of values with a gaussian kernel:
    multiplies each pixel and neighbors within a kernel window and sums that for the new value.
    
The runtime complexity is O(n*h) where n is the number of data points in the 1D row and h is
the Gaussian Kernel window width.  One can calc the Gaussian FWZI or a little above it or use
a binomial kernel approximation.

The convolution theorem is used:  convolution of data X with Gaussian Kernel H
is done by multiplication in the fourier frequency domain.

    for each x_i as x0
        for each integer in h as x
            sum += pixel value * gaussian(x-x0, h)
                 where gaussian(x-x0, h) = gaussian(x, h) * gaussian(x0,h) with some normalization corrections
        
--------------------------------------------------------------
other interesting FFT applications:

    basics of the phase congruency (edge maps through FFT and filters)
        though MSER edges is faster and very accurate, but phase congruency basics are valuable tools...
        these are both in my github project curvature-scale-space-corners-and-transformations.
     
======================================================
https://homepages.inf.ed.ac.uk/rbf/CVonline/LOCAL_COPIES/PIRODDI1/NUFT/node3.html#SECTION00021000000000000000

--------------------------------------
Non-Uniform Discrete Fourier Transform
--------------------------------------

for irregularly sampled input

review of DFT:
   finite number N of samples of the signal p(t) taken at regular intervals of duration T_s 
(which can be considered a sampling interval). In practical cases the signal p(t) has not an infinite duration, 
but its total duration is T = N * T_s and we have a set {p_n} of samples of the signal p(t) taken at regular intervals. 
(the duration is the range in time, that is the last time minus the first time).
We can define p_n = p(t_n) where t_n = n * T_s for n=0,1,...N-1, is the sampling coordinate.
   for DFT, the signal is discrete and the FT is definded only at regular points in the frequency domain.
     i.e. P(w) is only defined for certain w_m, so it's P(w_m).
     the sample of P(w_m) are regularly spaced so that all samples w_m are multiples of a dominant frequency 1/T,
     that is, w_m = m * (2*pi/T) for m=0,...N-1.
     T is the finite duration of the signal p(x).
     N frequency samples = N in temporal domain samples (not necessary, but notation is simplified).
         P(w_m) = sum_{n=0,N-1}( p(t_n)*exp(-j w_m*t_n) )

            since w_m can only be discrete values m*(2*pi/T) for m=0,...N-1
            and since x_n can only be discrete values of n*T_s:

         P(w_m) = sum_{n=0,N-1}( p(t_n)*exp(-j (m*2*pi/T) * (n*T_s)) )
                = sum_{n=0,N-1}( p(t_n)*exp(-j (m*2*pi/(N*T_s)) * (n*T_s)) )
                = sum_{n=0,N-1}( p(n)*exp(-j (m*n*2*pi/N)) )
         which is now expressed P(m) and p(n)
         and P(n) = sum_{n=0,N-1}( P(m)*exp(j (m*n*2*pi/N)) )

For Non-uniform Discrete Fourier Transform (NDFT):
    in general, we'd like to use same DFT but for irregular intervals in time (t_n) and frequency (w_m),
    but practically, the restricted case is solved:
       samples are irregular in time, and have regular intervals in frequency domain, delta k.
       where delta k above = 2*pi/T 

       P(m) = sum_{n=0,N-1}( p(n)*exp(-j (m*deltak*t_n)) )
       P(m) = sum_{n=0,N-1}( p(n)*exp(-j (m*2*pi/T) * t_n) ) to use T as the range of extension for the samples t_n

    differences between DFT and NDFT:
       (1) samples in frequency are taken at intervals 2*pi/T in the irregular case
           and 2*pi/N in the regular interval case.
           where T is the duration of the signal p(t) with t:[0,T]
           and N is the number of samples in the signal p(t).
       (2) for the irregular case, the sampling coordinate t_n is in the exponent (rather than the index n).

implementation: https://github.com/flatironinstitute/finufft

paper using NUFFT:
   https://opg.optica.org/oe/fulltext.cfm?uri=oe-19-27-26891&id=225906
   "Selection of convolution kernel in non-uniform fast Fourier transform for Fourier domain optical 
    coherence tomography", Chan and Tang 2011 
    Optics Express Vol. 19, Issue 27, pp. 26891-26904 (2011) •https://doi.org/10.1364/OE.19.026891

    gridding based nufft:
       NUFFT is a fast algorithm that approximates NDFT [14,15,19,20]. 
        non-uniform k spacing, 
        ko is the wavenumber of the first sample, 
        ΔK is the wavenumber range, 
        and N is the number of sample points. 
        Its steps are summarized in the following:

        1) Convolve the non-uniformly sampled k domain data with a kernel function.
        2) Resample the result onto evenly spaced locations on an oversampled grid.
        3) Compute the Fourier transform using an FFT on the oversampled data.
        4) Apply a deconvolution in the z domain by a division of the FT of the kernel 
           function (also known as apodization correction or deapodization).
     see Fig 2.

