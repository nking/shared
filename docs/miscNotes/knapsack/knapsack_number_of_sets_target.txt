see shared/src/main/algorithms/optimization/Knapsack*

===========================================================
number of ways a set of items can sum to target:
    Given a set of n items, each with a mass,
    determine the number of ways that combinations of items
    have a total weight W is exactly equal to a given target.
  
basic outline for all target methods:

    int[] tab = new int[target + 1];
    tab[0] = 1;

    int i, wc, t, c, wc2;
    for (i = 0; i < n; i++) {
    ... specialized weight logic for each knapsack type ...
    }
    return tab[target];

0-1:
        // since tab holds current i and previous i results,
        // need to traverse weights from high to low indices
        // to avoid including an updated low index wc2 in current wc
        for (wc = target; wc >= weights[i]; --wc) {
            wc2 = wc - weights[i];
            tab[wc] += tab[wc2];
        }
    }

Bounded:
        // since tab holds current i and previous i results,
        // need to traverse weights from high to low indices
        // to avoid including an updated low index wc2 in current wc
        for (wc = target; wc >= weights[i]; --wc) {
            for (q = 1; q <= quantities[i]; ++q) {
                // wc2 is the remaining sum after q coins subtracted
                int wc2 = wc - weights[i] * q;
                if (wc2 < 0) break;
                // adds counts from current sum and remaining sum
                tab[wc] += tab[wc2];
            }
        }

Unbounded:
        // cannot traverse weight sum in reverse order here.
        // traverse wc from 1 to target to be able to 
        // add current wc2 counts to current count sum
        for (wc = weights[i]; wc <= target; wc++) {
            wc2 = wc - weights[i];
            tab[wc] += tab[wc2];
        }

