see shared/src/main/algorithms/optimization/Knapsack*

===========================================================
number of sequences that sum to target:
    Given a set of n items, each with a mass,
    determine the number of sequences that
    have a total weight W is exactly equal to a given target.
  
basic outline for all target methods:

    int[] tab = new int[target + 1];
    tab[0] = 1;

    int i, wc, t, c, wc2;

0-1:
    // to count sequences instead of sets, outer loop is indexes to 
    // include all prev calc items  in current weight count
    for (i = 0; i < n; ++i) {
        // traverse wc from low to high indices to include current 
        // updates in next tab[wc]
        for (wc = weights[i]; wc <= target; ++wc) {
            wc2 = wc - weights[i];
            //if (wc2 >= 0) {
                // adds counts from remaining sum
                tab[wc] += tab[wc2];
            //}
        }
    }

Bounded:
    takes extra book keeping to store the quantities for each set solution,
    then counts each solution and adjusts for multiplicities (sets -> permutations).
    ...Map<Integer, List<int[]>> tabQ = new HashMap<>();
    for (int i = 0; i < n; ++i) {
        // since tab holds current and prev i results,
        // need to traverse weights from high to low indices
        // to avoid including an updated low index wc2 in current wc
        for (int wc = target; wc >= weights[i]; --wc) {
            for (int q = 1; q <= quantities[i]; ++q) {
                // wc2 is the remaining sum after q coins subtracted
                int wc2 = wc - weights[i] * q;
       ... stores quantities while updating tab...
           see KnapsackBounded.numberOfSequencesForTarget(...)

Unbounded:
    for (wc = 1; wc <= target; ++wc) {
        for (i = 0; i < n; ++i) {
            // the remaining sum after weight subtracted
            wc2 = wc - weights[i];
            if (wc2 >= 0) {
                // adds counts from remaining sum
                tab[wc] += tab[wc2];
            }
        }
    }
