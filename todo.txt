-- add the multivariate sample predict
    to the BayesianCurveFitting method
    y = x * MultivariateNormalDistribution.sampleRandomlyFrom0

-- implement the pseudo-determinant
   from wikipedia:
   In linear algebra and statistics, the pseudo-determinant[1] is the product of all 
   non-zero eigenvalues of a square matrix. It coincides with the regular determinant 
   when the matrix is non-singular.
   Minka, T.P. (2001). "Inferring a Gaussian Distribution"

   If A is positive semi-definite, then the singular values and eigenvalues of A coincide. 
   In this case, if the singular value decomposition (SVD) is available, then A_{+} may be 
   computed as the product of the non-zero singular values. If all singular values are zero, 
   then the pseudo-determinant is 1.
   
-- implement a fusion tree and add it to the heap wrapper.
   from ods:
      fusion tree can store n w-bit integers in O(n) space so that the find(x) operation runs in 
      O(log{n}/log{w}) time. By using a fusion tree when log(w) > sqrt{log{n}} and 
      using a YFastTrie when log{w} le sqrt{log{n}}, one obtains an O(n) space data structure 
      that can implement the find(x) operation in O(sqrt{log{n}}) time.
-- consider dynamic graph data structures (Henzinger 2000)

-- consider changing java compile source to 1.11
   -- then update libraries

-- update the JUnit library and make any needed changes

-- implement approx inverse CDF:
   can approximate an inverse CDF using piecewise constant (PWC) or
   piecewise linear (PWL).
   - Inverse method from "Independent Random Sampling", 2018, Martino et al.

-- in the sampling packages (e.g. algorithms.imageProcessing.features or create new), 
   add variational Bayes and expectation propagation 
   they allow Bayesian techniques to be used in large-scale applications (Blei et al., 2003).

-- consider implementing a 3D voronoi

-- implement perfect hashing one day. not currently needed.
   openjdk has an implementation of
   "A Practical Minimal Perfect Hashing Method" - Fabiano C. Botelho1,
   Yoshiharu Kohayakawa, and Nivio Ziviani, 2005 
   in PerfectHashBuilder.java 

-- consider implementing bi-directional search.
   Holte et al. 2016, "Bidirectional Search That Is Guaranteed to Meet in the Middle",
   Proceedings of the Thirtieth AAAI Conference on Artificial Intelligence (AAAI-16)

-- consider refactoring the code for permutations (Shuffle), combinations
   and partitions to place in one package/directory.

-- for improving the current NearestNeighbor2DLong
   could consider locality based hashing along y axis.

-- when begin to include more than 2 dimensions in clustering project,
   consider adding the vantage point tree for nearest neighbor search
   http://infolab.stanford.edu/~sergey/near.html
   http://www.pnylab.com/pny/papers/vptree/vptree/
   http://www.drmaciver.com/2011/12/4202/
   https://github.com/smreed/Java-Vantage-Tree.git

-- add unit tests where missing

-- consider importing some of code stored elsewhere, like the linear programming simplex
     method and tests in minCostFlow

-- consider moving to this project, the notes and code related to feature hashing
   in progress.
   -- related is adding compression to the bit vectors in VeryLongBitString.
      -- consider adding RoaringBitmap java implementation
      -- consider adding simple fast lite compression in bitmap encoding and decoding notes
   -- "Handling Massive N-Gram Datasets"

-- clean up the multiply and dot operations in MatrixUtil

-- consider http://members.cbio.mines-paristech.fr/~jvert/svn/bibli/local/Bengio2004Learning.pdf

-- https://adrianulbona.github.io/hmm/

-- browse 
   M. R. Henzinger, T. A. Henzinger and P. W. Kopke, "Computing simulations on finite and infinite graphs," Proceedings of IEEE 36th Annual Foundations of Computer Science, 1995, pp. 453-462, doi: 10.1109/SFCS.1995.492576.

-- implement a suffix array.
   https://github.com/kvark/dark-archon if license allows
   https://github.com/y-256/libdivsufsort/blob/wiki/SACA_Benchmarks.md
   
-- browse:
   Exactly Solving the Maximum Weight Independent Set Problem on Large Real-World Graphs
   Lamm et al. 2018, https://arxiv.org/abs/1810.10834
 
   Hopfield network

   "Narrow sieves for parameterized paths and packings", Bjorklund et al. 2010

